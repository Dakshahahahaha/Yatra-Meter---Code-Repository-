import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

#to upload data
df = pd.read_csv('sampledata.csv')

# preprocessed data
df['time_of_day'] = pd.Categorical(df['time_of_day'])
df['day_of_week'] = pd.Categorical(df['day_of_week'])
df['season'] = pd.Categorical(df['season'])

#categorical features
df = pd.get_dummies(df, columns=['time_of_day', 'day_of_week', 'season'])

# splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df.drop('crowd_count', axis=1), df['crowd_count'], test_size=0.2, random_state=42)

# training the random forest regressor model
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# making predictions
y_pred = rf.predict(X_test)

# error detection
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse:.2f}')

# giving output
new_train_data = pd.DataFrame({'time_of_day': ['morning'], 'day_of_week': ['Monday'], 'season': ['summer'], 'train_id': [21]})
new_train_data = pd.get_dummies(new_train_data, columns=['time_of_day', 'day_of_week', 'season'])
new_train_data = new_train_data.reindex(columns=X_train.columns, fill_value=0)

predicted_crowd_count = rf.predict(new_train_data)
print(f'Predicted crowd count for train 123 on Monday morning in summer: {predicted_crowd_count[0]:.2f}')
